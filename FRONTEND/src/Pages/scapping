import React, { useContext } from 'react'
import { Formik, Field, Form } from 'formik';
import * as Yup from 'yup';
import { useState } from 'react';
import { Navigate, useNavigate } from 'react-router-dom';
import { useEffect } from 'react';


export default function Scrapping() {
  
   const navigate = useNavigate();
 
  
    // onSubmit: (values) => {
    //     console.log("form submitted");
    //     console.log(values); };
   
   /**************** */
  //  const [ Scrapping , setScrapping ]= useState("");
  //  const [errorMessage , seterrorMessage] = useState("");
   
  //  const getScrapping=  async()=>{
  //    const requestOptions = {
  //       methode : "POST" ,
  //       headers : {
  //        "Content-Type " : "application/json"
  //       },
  //       body :JSON.stringify({debut: debut , fin: fin})
  //    };
  //    const response = await fetch ("/api",requestOptions);
  //    const data = await response.json();
  //    console.log(data);
  //  } ;
  
  // useEffect(()=>{
  //   getScrapping();
  // },[]);
  return (
    <div className='admin_page h-screen flex items-center justify-center mt-32  lg:m-10 m-2 rounded-lg bg-center bg-[#1e3252]'>
          <Formik
            initialValues={{
                          debut : "",
                          fin:""
                      }}
             validationSchema={{
                      debut:Yup.string().required("Veuillez introduire la page debut de la  récupération des annonces "),
                      fin:Yup.string().required("Veuillez introduire la page fin de la  récupération des annonces :")
                  }}
             onSubmit={(values, { setSubmitting }) => {
           setTimeout(() => {
             alert(JSON.stringify(values, null, 2));
             setSubmitting(false);
           }, 400);}}
          >
           {({
         values,
         errors,
         touched,
         handleChange,
         handleBlur,
         handleSubmit,
         isSubmitting,
         /* and other goodies */
       }) => (
         <form className='m-4 p-28 rounded-lg' onSubmit={handleSubmit}>
            <h1 className=' text-center font-LibreBaskerville text-3xl p-6 font-bold text-yellow-600'> Lancer la récupération d'annonce : </h1>
               
            <div>
                <label htmlFor="" className='font-Montserrat text-base font-extrabold text-sky-900'>Page début :</label>
                <input type="tel" name="debut"
                 value={values.debut}
                onChange={handleChange}
                onBlur ={handleBlur}
                 className='m-4 p-2  rounded-lg'/>
                   <p id="utile" className ="block text-sm font-medium  pb-4 font-Montserrat  text-red-600 ">
                            {touched.debut && errors.debut ? errors.debut: ""}</p>
            </div>
            <div>
                <label htmlFor="" className='mr-6 font-Montserrat font-extrabold text-base text-sky-900'>Page fin :</label>
                <input type="tel" name="fin"
                 value={values.fin}
                onChange={handleChange}
                onBlur ={handleBlur}
                 className='m-4 p-2  rounded-lg'/>
                   <p id="utile" className ="block text-sm font-medium  pb-4 font-Montserrat  text-red-600 ">
                            {touched.fin && errors.fin ? errors.fin: ""}</p>
            </div>
              
            
             <div>
             <button type="submit"   id="Recuperer" onClick={()=>navigate('Success')}
            className="text-white bg-gradient-to-br ml-10 m-12 font-LibreBaskerville from-[#1a2536] to-sky-900 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-sky-900 dark:focus:ring-[#1a2536] font-medium rounded-lg text-sm px-5 py-2.5 text-center  mb-2">
            Récupérer</button>
             </div>     
         </form>
         )}
         </Formik>
    </div>
  )
}
